package npc

import chisel3._
import chisel3.util._

trait MicroOP {
  def ALU_ILL_ = "01001"

  def ALU_ADD_ = "00000"
  def ALU_SUB_ = "01000"
  def ALU_EQ__ = "01100"
  def ALU_SLT_ = "00010"
  def ALU_SLE_ = "01010"
  def ALU_SGE_ = "01110"
  def ALU_SLTU = "00011"
  def ALU_SLEU = "01011"
  def ALU_SGEU = "01111"
  def ALU_XOR_ = "00100"
  def ALU_OR__ = "00110"
  def ALU_AND_ = "00111"

  def ALU_SLL_ = "00001"
  def ALU_SRL_ = "00101"
  def ALU_SRA_ = "01101"

  def ALU_MUL_ = "11000"
  def ALU_MULH = "11001"
  def ALU_MULS = "11010"
  def ALU_MULU = "11011"
  def ALU_DIV_ = "11100"
  def ALU_DIVU = "11101"
  def ALU_REM_ = "11110"
  def ALU_REMU = "11111"

  // w: word 32, h: half 16, b: byte 8
  def LSU_LB_ = "00000"
  def LSU_LH_ = "00001"
  def LSU_LW_ = "00010"
  def LSU_LBU = "00100"
  def LSU_LHU = "00101"

  def LSU_SB_ = "00001" // alu_op to axi wstrb
  def LSU_SH_ = "00011" // alu_op to axi wstrb
  def LSU_SW_ = "01111" // alu_op to axi wstrb

  def ATO_LR__ = "00000"
  def ATO_SC__ = "00001"
  def ATO_SWAP = "00010"
  def ATO_ADD_ = "00011"
  def ATO_XOR_ = "00100"
  def ATO_AND_ = "00101"
  def ATO_OR__ = "00110"
  def ATO_MIN_ = "00111"
  def ATO_MAX_ = "01000"
  def ATO_MINU = "01001"
  def ATO_MAXU = "01010"

  // Supervisor-level CSR
  def SSTATUS = "h100".U(12.W)
  def SIE___  = "h104".U(12.W)
  def STVEC_  = "h105".U(12.W)

  def SCOUNTEREN = "h106".U(12.W)

  def SSCRATCH = "h140".U(12.W)
  def SEPC__   = "h141".U(12.W)
  def SCAUSE   = "h142".U(12.W)
  def STVAL_   = "h143".U(12.W)
  def SIP___   = "h144".U(12.W)
  def SATP__   = "h180".U(12.W)

  // Machine Trap Settup
  def MSTATUS = "h300".U(12.W)
  def MISA__  = "h301".U(12.W)
  def MEDELEG = "h302".U(12.W)
  def MIDELEG = "h303".U(12.W)
  def MIE___  = "h304".U(12.W)
  def MTVEC_  = "h305".U(12.W)

  def MSTATUSH = "h310".U(12.W)

  // Machine Trap Handling
  def MSCRATCH = "h340".U(12.W)
  def MEPC__   = "h341".U(12.W)
  def MCAUSE   = "h342".U(12.W)
  def MTVAL_   = "h343".U(12.W)
  def MIP___   = "h344".U(12.W)

  def MCYCLE = "hb00".U(12.W)
  def MTIME_ = "hc01".U(12.W)
  def MTIMEH = "hc81".U(12.W)

  // Machine Information Registers
  def MVENDORID  = "hf11".U(12.W)
  def MARCHID    = "hf12".U(12.W)
  def MIMPID     = "hf13".U(12.W)
  def MCONFIGPTR = "hf14".U(12.W)
}

trait Instr {
  //                                 imm[31:12]    rd  opcode
  def LUI___ = BitPat("b??????? ????? ????? ??? ????? 0110111")
  def AUIPC_ = BitPat("b??????? ????? ????? ??? ????? 0010111")
  //                      imm[20|10:1|11|19:12]    rd  opcode
  def JAL___ = BitPat("b??????? ????? ????? ??? ????? 1101111")
  //                        imm[11:0]   rs1 funct3 rd  opcode
  def JALR__ = BitPat("b??????? ????? ????? 000 ????? 1100111")
  //               imm[12|10:5]   rs2   rs1 funct3 imm[4:1|11] opcode
  def BEQ___ = BitPat("b??????? ????? ????? 000 ????? 1100011")
  def BNE___ = BitPat("b??????? ????? ????? 001 ????? 1100011")
  def BLT___ = BitPat("b??????? ????? ????? 100 ????? 1100011")
  def BGE___ = BitPat("b??????? ????? ????? 101 ????? 1100011")
  def BLTU__ = BitPat("b??????? ????? ????? 110 ????? 1100011")
  def BGEU__ = BitPat("b??????? ????? ????? 111 ????? 1100011")
  //                        imm[11:0]   rs1 funct3 rd  opcode
  def LB____ = BitPat("b??????? ????? ????? 000 ????? 0000011")
  def LH____ = BitPat("b??????? ????? ????? 001 ????? 0000011")
  def LW____ = BitPat("b??????? ????? ????? 010 ????? 0000011")
  def LBU___ = BitPat("b??????? ????? ????? 100 ????? 0000011")
  def LHU___ = BitPat("b??????? ????? ????? 101 ????? 0000011")
  //                  imm[11:5]   rs2   rs1 funct3 imm[4:0] opcode
  def SB____ = BitPat("b??????? ????? ????? 000 ????? 0100011")
  def SH____ = BitPat("b??????? ????? ????? 001 ????? 0100011")
  def SW____ = BitPat("b??????? ????? ????? 010 ????? 0100011")
  //                        imm[11:0]   rs1 funct3 rd  opcode
  def ADDI__ = BitPat("b??????? ????? ????? 000 ????? 0010011")
  def SLTI__ = BitPat("b??????? ????? ????? 010 ????? 0010011")
  def SLTIU_ = BitPat("b??????? ????? ????? 011 ????? 0010011")
  def XORI__ = BitPat("b??????? ????? ????? 100 ????? 0010011")
  def ORI___ = BitPat("b??????? ????? ????? 110 ????? 0010011")
  def ANDI__ = BitPat("b??????? ????? ????? 111 ????? 0010011")
  //                        imm shamt   rs1 funct3 rd  opcode
  def SLLI__ = BitPat("b0000000 ????? ????? 001 ????? 0010011")
  def SRLI__ = BitPat("b0000000 ????? ????? 101 ????? 0010011")
  def SRAI__ = BitPat("b0100000 ????? ????? 101 ????? 0010011")
  //                        imm   rs2   rs1 funct3 rd  opcode
  def ADD___ = BitPat("b0000000 ????? ????? 000 ????? 0110011")
  def SUB___ = BitPat("b0100000 ????? ????? 000 ????? 0110011")
  def SLL___ = BitPat("b0000000 ????? ????? 001 ????? 0110011")
  def SLT___ = BitPat("b0000000 ????? ????? 010 ????? 0110011")
  def SLTU__ = BitPat("b0000000 ????? ????? 011 ????? 0110011")
  def XOR___ = BitPat("b0000000 ????? ????? 100 ????? 0110011")
  def SRL___ = BitPat("b0000000 ????? ????? 101 ????? 0110011")
  def SRA___ = BitPat("b0100000 ????? ????? 101 ????? 0110011")
  def OR____ = BitPat("b0000000 ????? ????? 110 ????? 0110011")
  def AND___ = BitPat("b0000000 ????? ????? 111 ????? 0110011")

  def ECALL_ = BitPat("b0000000 00000 00000 000 00000 1110011")
  def EBREAK = BitPat("b0000000 00001 00000 000 00000 1110011")

  def FENCE____ = BitPat("b0000??? ????? 00000 000 00000 0001111")
  def FENCE_TSO = BitPat("b1000001 10011 00000 000 00000 0011111")
  // Zifencei               imm[11:0]   rs1 func3  rd  opcode
  def FENCE_I__ = BitPat("b??????? ????? ????? 001 ????? 0001111")
  // Zifencetime
  def FENCE_TIM = BitPat("b0000000 00000 00000 010 00000 0001111")

  def SFENCE_VM = BitPat("b0001001 ????? ????? 000 00000 1110011")

  // RV32/RV64 Zicsr              csr   rs1 func3  rd  opcode
  def CSRRW_ = BitPat("b??????? ????? ????? 001 ????? 1110011")
  def CSRRS_ = BitPat("b??????? ????? ????? 010 ????? 1110011")
  def CSRRC_ = BitPat("b??????? ????? ????? 011 ????? 1110011")
  // RV32/RV64 Zicsr i            csr  uimm func3  rd  opcode
  def CSRRWI = BitPat("b??????? ????? ????? 101 ????? 1110011")
  def CSRRSI = BitPat("b??????? ????? ????? 110 ????? 1110011")
  def CSRRCI = BitPat("b??????? ????? ????? 111 ????? 1110011")
  // RV32M                  imm   rs2   rs1 funct3 rd  opcode
  def MUL___ = BitPat("b0000001 ????? ????? 000 ????? 0110011")
  def MULH__ = BitPat("b0000001 ????? ????? 001 ????? 0110011")
  def MULHSU = BitPat("b0000001 ????? ????? 010 ????? 0110011")
  def MULHU_ = BitPat("b0000001 ????? ????? 011 ????? 0110011")
  def DIV___ = BitPat("b0000001 ????? ????? 100 ????? 0110011")
  def DIVU__ = BitPat("b0000001 ????? ????? 101 ????? 0110011")
  def REM___ = BitPat("b0000001 ????? ????? 110 ????? 0110011")
  def REMU__ = BitPat("b0000001 ????? ????? 111 ????? 0110011")

  // RV32A                      ar  rs2   rs1  f3    rd   opcode
  def LR_W__    = BitPat("b00010?? 00000 ????? 010 ????? 0101111")
  def SC_W__    = BitPat("b00011?? ????? ????? 010 ????? 0101111")
  def AMOSWAP_W = BitPat("b00001?? ????? ????? 010 ????? 0101111")
  def AMOADD_W_ = BitPat("b00000?? ????? ????? 010 ????? 0101111")
  def AMOXOR_W_ = BitPat("b00100?? ????? ????? 010 ????? 0101111")
  def AMOAND_W_ = BitPat("b01100?? ????? ????? 010 ????? 0101111")
  def AMOOR_W__ = BitPat("b01000?? ????? ????? 010 ????? 0101111")
  def AMOMIN_W_ = BitPat("b10000?? ????? ????? 010 ????? 0101111")
  def AMOMAX_W_ = BitPat("b10100?? ????? ????? 010 ????? 0101111")
  def AMOMINU_W = BitPat("b11000?? ????? ????? 010 ????? 0101111")
  def AMOMAXU_W = BitPat("b11100?? ????? ????? 010 ????? 0101111")

  // Trap-Return          func7   rs2   rs1 func3  rd  opcode
  def MRET__ = BitPat("b0011000 00010 00000 000 00000 1110011")
  def SRET__ = BitPat("b0001000 00010 00000 000 00000 1110011")

  def WFI___ = BitPat("b0001000 00101 00000 000 00000 1110011")
}
